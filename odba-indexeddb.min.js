/*! odba-indexeddb - 0.1.1 (2014-12-09) */function Driver(name){Object.defineProperty(this,"name",{value:name})}function Result(rows){Object.defineProperty(this,"rows",{value:rows})}function ResultFilter(){}function IndexedDBConnection(config){Object.defineProperty(this,"config",{value:config}),Object.defineProperty(this,"database",{value:void 0,enumerable:!0,writable:!0}),Object.defineProperty(this,"transaction",{value:void 0,writable:!0});try{Object.defineProperty(this,"indexedDB",{value:Modernizr.indexedDB})}catch(e){Object.defineProperty(this,"indexedDB",{value:window.indexedDB})}}function IndexedDBDatabase(cx,db){Object.defineProperty(this,"connection",{value:cx}),Object.defineProperty(this,"name",{value:db.name,enumerable:!0}),Object.defineProperty(this,"version",{value:db.version,enumerable:!0}),Object.defineProperty(this,"native",{value:db})}function IndexedDBDriver(){IndexedDBDriver.super_.call(this,"IndexedDB")}function IndexedDBIndex(store,ix){Object.defineProperty(this,"table",{value:store}),Object.defineProperty(this,"name",{value:ix.name}),Object.defineProperty(this,"column",{value:ix.keyPath}),Object.defineProperty(this,"unique",{value:ix.unique}),Object.defineProperty(this,"native",{value:ix})}function IndexedDBResult(records,options){options||(options={}),options.byKey||(options.byKey=!1),options.byIndex||(options.byIndex=!1),IndexedDBResult.super_.call(this,records),Object.defineProperty(this,"byKey",{value:options.byKey}),Object.defineProperty(this,"byIndex",{value:options.byIndex})}function IndexedDBTable(db,store){var indexes={},indexed={};Object.defineProperty(this,"database",{value:db}),Object.defineProperty(this,"name",{value:store.name}),Object.defineProperty(this,"keyPath",{value:store.keyPath}),Object.defineProperty(this,"autoIncrement",{value:store.autoIncrement}),Object.defineProperty(this,"connection",{value:db.connection}),Object.defineProperty(this,"indexes",{value:indexes}),Object.defineProperty(this,"indexed",{value:indexed});for(var i=0;i<store.indexNames.length;++i){var ixName=store.indexNames[i],ix=new IndexedDBIndex(this,store.index(ixName));indexes[ixName]=ix,indexed[ix.column]=ix}}function IndexedDBTransaction(tran,cx,stores,handlers){var self=this;Object.defineProperty(this,"native",{value:tran}),Object.defineProperty(this,"connection",{value:cx}),Object.defineProperty(this,"abortHandlers",{value:[]}),Object.defineProperty(this,"errorHandlers",{value:[]}),Object.defineProperty(this,"completeHandlers",{value:[]}),Object.defineProperty(this,"state",{value:"active",writable:!0}),Object.defineProperty(this,"objectStoreNames",{value:stores}),tran.onerror=function(e){self.connection.transaction=void 0,self.handleErrorEvent(e)},tran.onabort=function(e){self.connection.transaction=void 0,self.handleAbortEvent(e)},tran.oncomplete=function(e){self.connection.transaction=void 0,self.handleCompleteEvent(e)},handlers&&(handlers.error&&this.on("error",handlers.error),handlers.abort&&this.on("abort",handlers.abort),handlers.complete&&this.on("complete",handlers.complete))}Driver.getDriver=function(name){return"indexeddb"==name.toLowerCase()?new IndexedDBDriver:void 0},Result.prototype.__defineGetter__("length",function(){return this.rows.length}),Result.prototype.find=function(where){return(new ResultFilter).find(this,where)},ResultFilter.prototype.find=function(result,filter){var filtered=[];filter||(filter={});for(var i=0,rows=result.rows;i<result.length;++i){var row=rows[i];this.check(row,filter)&&filtered.push(row)}return filtered},ResultFilter.prototype.check=function(row,filter){var res=!1,keys=Object.keys(filter);if(0==keys.length)res=!0;else if(1==keys.length)res=this.checkProp(row,keys[0],filter);else{res=!0;for(var i=0,props=keys;i<props.length;++i){var prop=props[i];if(!this.checkProp(row,prop,filter)){res=!1;break}}}return res},ResultFilter.prototype.checkProp=function(row,prop,filter){var res;if(filter=filter[prop],"object"!=typeof filter)res=this.$eq(row,prop,filter);else{var ops=Object.keys(filter);if(0==ops.length)res=!0;else if(1==ops.length)res=this.checkOp(row,prop,ops[0],filter);else{res=!0;for(var i=0;i<ops.length;++i)if(!this.checkOp(row,prop,ops[i],filter)){res=!1;break}}}return res},ResultFilter.prototype.checkOp=function(row,prop,op,filter){var res;if("$eq"==op)res=this.$eq(row,prop,filter.$eq);else if("$ne"==op)res=this.$ne(row,prop,filter.$ne);else if("$lt"==op)res=this.$lt(row,prop,filter.$lt);else if("$le"==op)res=this.$le(row,prop,filter.$le);else if("$gt"==op)res=this.$gt(row,prop,filter.$gt);else if("$ge"==op)res=this.$ge(row,prop,filter.$ge);else if("$like"==op)res=this.$like(row,prop,filter.$like);else if("$notLike"==op)res=this.$notLike(row,prop,filter.$notLike);else if("$in"==op)res=this.$in(row,prop,filter.$in);else{if("$notIn"!=op)throw new Error("Unknown operator: '"+op+"'.");res=this.$notIn(row,prop,filter.$notIn)}return res},ResultFilter.prototype.$eq=function(row,prop,value){return void 0===value?void 0===row[prop]:null===value?null===row[prop]:row[prop]==value},ResultFilter.prototype.$ne=function(row,prop,value){return void 0===value?void 0!==row[prop]:null===value?null!==row[prop]:row[prop]!=value},ResultFilter.prototype.$lt=function(row,prop,value){return void 0===value||null===value?!1:row[prop]<value},ResultFilter.prototype.$le=function(row,prop,value){return void 0===value||null===value?!1:row[prop]<=value},ResultFilter.prototype.$gt=function(row,prop,value){return void 0===value||null===value?!1:row[prop]>value},ResultFilter.prototype.$ge=function(row,prop,value){return void 0===value||null===value?!1:row[prop]>=value},ResultFilter.prototype.$like=function(row,prop,value){return void 0===value||null===value?this.$eq(row,prop,value):new RegExp(value).test(row[prop])},ResultFilter.prototype.$notLike=function(row,prop,value){return void 0===value||null===value?this.$ne(row,prop,value):!this.$like(row,prop,value)},ResultFilter.prototype.$in=function(row,prop,value){return void 0===value||null===value?!1:value.indexOf(row[prop])>=0},ResultFilter.prototype.$notIn=function(row,prop,value){return!this.$in(row,prop,value)};var util={inherits:function(child,parent){child.super_=parent,child.prototype=Object.create(parent.prototype,{constructor:{value:child,enumerable:!1,writable:!0,configurable:!0}})},_extend:function(origin,add){if("object"==typeof add)for(var i=0,keys=Object.keys(add);i<keys.length;++i){var k=keys[i];origin[k]=add[k]}return origin},getBrowserName:function(){return window.chrome?"Chrome":"Other"}};IndexedDBConnection.prototype.clone=function(){return new IndexedDBConnection(util._extend({},this.config))},IndexedDBConnection.prototype.open=function(callback){var req,self=this,indexedDB=this.indexedDB;if(this.connected)return void(callback&&callback(void 0,this.database));if(arguments.length<1)throw new Error("Callback expected.");req=this.config.version?indexedDB.open(this.config.database,this.config.version):indexedDB.open(this.config.database),req.onsuccess=function(e){self.database=new IndexedDBDatabase(self,e.target.result),callback&&callback(void 0,self.database)},req.onerror=function(e){callback&&callback(e)}},IndexedDBConnection.prototype.__defineGetter__("connected",function(){return void 0!==this.database&&null!==this.database}),IndexedDBConnection.prototype.close=function(callback){this.database&&this.database.native.close(),this.database=void 0,callback&&callback()},IndexedDBConnection.prototype.createDatabase=function(ddl,callback){var req,self=this,indexedDB=this.indexedDB;if(this.connected)throw new Error("Connection opened.");req=indexedDB.open(this.config.database),req.onerror=function(e){self.transaction=void 0,callback&&callback(e)},req.onupgradeneeded=function(e){self.transaction=new IndexedDBTransaction(e.currentTarget.transaction,self),ddl&&ddl(new IndexedDBDatabase(self,e.target.result))},req.onsuccess=function(e){self.transaction=void 0,e.target.result.close(),callback&&callback()}},IndexedDBConnection.prototype.alterDatabase=function(ddl,callback){var req,self=this,indexedDB=this.indexedDB;if(this.connected)throw new Error("Connection opened.");if(arguments.length<1)throw new Error("Operation to alter schema expected.");req=indexedDB.open(this.config.database),req.onerror=function(e){callback&&callback(e)},req.onsuccess=function(e){var version,db=e.target.result;version=db.version+1,db.close();var req=indexedDB.open(self.config.database,version);req.onupgradeneeded=function(e){self.transaction=new IndexedDBTransaction(e.currentTarget.transaction,self),ddl(new IndexedDBDatabase(self,e.target.result))},req.onerror=function(e){self.transaction=void 0,callback&&callback(e)},req.onsuccess=function(e){self.transaction=void 0,e.target.result.close(),callback&&callback()}}},IndexedDBConnection.prototype.dropDatabase=function(callback){this.indexedDB.deleteDatabase(this.config.database),callback&&callback()},IndexedDBConnection.prototype.hasDatabase=function(name,callback){var req,indexedDB=this.indexedDB;if(arguments.length<1)throw new Error("Callback expected.");if(1==arguments.length&&(callback=arguments[0],name=this.config.database),"Chrome"==util.getBrowserName())req=this.indexedDB.webkitGetDatabaseNames(),req.onsuccess=function(e){callback(void 0,e.target.result.contains(name))},req.onerror=function(e){callback(e)};else{var existed=!0;req=indexedDB.open(name),req.onupgradeneeded=function(){existed=!1},req.onsuccess=function(){req.result.close(),existed&&indexedDB.deleteDatabase(self),callback(void 0,existed)}}},IndexedDBConnection.prototype.beginTransaction=function(mode,stores,handlers){var tran;if(1==arguments.length?arguments[0]instanceof Array?(stores=arguments[0],mode=handlers=void 0):"object"==typeof arguments[0]&&(handlers=arguments[0],mode=stores=void 0):2==arguments.length&&(arguments[0]instanceof Array?(handlers=arguments[1],stores=arguments[0],mode=void 0):arguments[1]instanceof Array||"string"==typeof arguments[1]||(handlers=arguments[1],stores=void 0)),mode=mode||"readwrite","string"==typeof stores&&(stores=[stores]),handlers||(handlers={}),this.hasTransaction()){if(tran=this.transaction,"readonly"==tran.mode&&"readonly"!=mode)throw new Error("Active transaction is read-only and it can't be promoted to another mode.");if("readonly"==tran.mode||"readwrite"==tran.mode){if(stores){if(stores.length<1)throw new Error("Object store(s) expected.")}else stores=this.database.objectStoreNames;for(var i=0;i<stores.length;++i){var store=stores[i];if(tran.objectStoreNames.indexOf(store)<0)throw new Error("There's an active transaction and the new transaction can't be integrated therein. The object store '"+store+"' isn't in the active transaction.")}}}else{if(stores){if(stores.length<1)throw new Error("Object store(s) expected.")}else stores=this.database.objectStoreNames;tran=new IndexedDBTransaction(this.database.native.transaction(stores,mode),this,stores,handlers)}return this.transaction=tran,tran},IndexedDBConnection.prototype.hasTransaction=function(mode){var tran,res=!1;return tran=this.transaction,tran&&(res=mode?tran.mode==mode:!0),res},IndexedDBConnection.prototype.runTransaction=function(mode,op,callback){var tran;if(arguments.length<2)throw new Error("Transaction mode and operation expected.");if(this.hasTransaction())throw new Error("A transaction is active. IndexedDB can't nest transactions.");tran=this.beginTransaction(mode,void 0,{error:function(e){callback&&callback(e)},complete:function(){callback&&callback()}}),op(this.database)},IndexedDBDatabase.prototype.__defineGetter__("transaction",function(){return this.connection.transaction}),IndexedDBDatabase.prototype.__defineGetter__("objectStoreNames",function(){for(var names=[],i=0,stores=this.native.objectStoreNames;i<stores.length;++i)names.push(String(stores[i]));return names}),IndexedDBDatabase.prototype.containsObjectStore=function(name){return this.native.objectStoreNames.contains(name)},IndexedDBDatabase.prototype.containsObjectStores=function(names){var res;res=!0;for(var i=0;i<names.length;++i)if(!this.containsObjectStore(names[i])){res=!1;break}return res},IndexedDBDatabase.prototype.hasTable=function(name,callback){if(arguments.length<2)throw new Error("Table name and callback expected.");callback(void 0,this.containsObjectStore(name))},IndexedDBDatabase.prototype.hasTables=function(names,callback){var res;if(arguments.length<2)throw new Error("Table names and callback expected.");if(0==names.length)res=!1;else{res=!0;for(var i=0;i<names.length;++i)if(!this.containsObjectStore(names[i])){res=!1;break}}callback(void 0,res)},IndexedDBDatabase.prototype.getTable=function(name){return new IndexedDBTable(this,this.transaction.getObjectStore(name))},IndexedDBDatabase.prototype.findTable=function(name,callback){var table;if(arguments.length<2)throw new Error("Table name and callback expected.");if(this.containsObjectStore(name)){var tran;tran=this.connection.beginTransaction(void 0,name,{error:function(e){callback(e)}}),table=new IndexedDBTable(this,tran.getObjectStore(name))}callback(void 0,table)},IndexedDBDatabase.prototype.createTable=function(name,options,callback){var tran;if(arguments.length<1)throw new Error("Table name expected.");if(2==arguments.length&&arguments[1]instanceof Function&&(callback=arguments[1],options=void 0),options=util._extend({},options),options.hasOwnProperty("id")&&!options.hasOwnProperty("keyPath")&&(options.keyPath=options.id),tran=this.transaction,!tran)return void(callback&&callback(new Error("Database.createTable() only into Connection.createDatabase() or Connection.alterDatabase().")));if(this.native.objectStoreNames.contains(name))callback&&callback(new Error("Object store '"+name+"' already exists."));else{var store=this.native.createObjectStore(name,options);callback&&callback(void 0,new IndexedDBTable(this,store))}},IndexedDBDatabase.prototype.createTables=function(stores,callback){var tran,res=[];if(tran=this.transaction,!tran)return void(callback&&callback(new Error("Database.createTables() only into Connection.createDatabase() or Connection.alterDatabase().")));for(var i=0;i<stores.length;++i){var store=stores[i];res.push(new IndexedDBTable(this,this.native.createObjectStore(store.name,store)))}callback&&callback(void 0,res)},IndexedDBDatabase.prototype.dropTable=function(name,callback){var tran;return this.connection.hasTransaction("versionchange")?(tran=this.connection.transaction,this.containsObjectStore(name)&&this.native.deleteObjectStore(name),void(callback&&callback())):void(callback&&callback(new Error("Database.dropTable() only into Connection.alterDatabase().")))},IndexedDBDatabase.prototype.findIndex=function(table,index,callback){var tran,store,ix;if(arguments.length<3)throw new Error("Table name, index name and callback expected.");if(this.containsObjectStore(table)&&(tran=this.activeTransaction||this.native.transaction([table],"readonly"),store=tran.objectStore(table),store.indexNames.contains(index))){var tab=new IndexedDBTable(this,store);ix=tab.indexes[index]}callback(void 0,ix)},IndexedDBDatabase.prototype.hasIndex=function(table,ix,callback){var tran,res;if(arguments.length<3)throw new Error("Table name, index name and callback expected.");if(this.containsObjectStore(table)){tran=this.connection.beginTransaction(void 0,table),tran.on("error",function(e){callback(e)});var store=tran.getObjectStore(table);res=store.indexNames.contains(ix)}else res=!1;callback(void 0,res)},IndexedDBDatabase.prototype.createIndex=function(table,index,col,options,callback){var tran,store;if(arguments.length<3)throw new Error("Table name, index name and indexing column name expected.");4==arguments.length&&arguments[3]instanceof Function&&(callback=arguments[3],options=void 0),this.connection.hasTransaction("versionchange")?(tran=this.transaction,this.containsObjectStore(table)?(store=tran.getObjectStore(table),store.indexNames.contains(index)?callback&&callback(new Error("Index '"+index+"' on '"+table+"' already exists.")):(store.createIndex(index,col,options),callback&&callback())):callback&&callback(new Error("Object store '"+table+"' doesn't exist."))):callback&&callback(new Error("Database.createIndex() only into Connection.createDatabase() or Connection.alterDatabase()."))},IndexedDBDatabase.prototype.dropIndex=function(table,index,callback){var tran,store;if(arguments.length<2)throw new Error("Table name and index name expected.");this.connection.hasTransaction("versionchange")?(tran=this.transaction,this.containsObjectStore(table)&&(store=tran.getObjectStore(table),store.indexNames.contains(index)&&store.deleteIndex(index)),callback&&callback()):callback&&callback(new Error("Database.dropIndex() only into Connection.alterDatabase()."))},util.inherits(IndexedDBDriver,Driver),IndexedDBDriver.prototype.createConnection=function(config){if(!config||!config.database)throw new Error("Database name expected.");return new IndexedDBConnection(config)},IndexedDBIndex.prototype.__defineGetter__("database",function(){return this.table.database}),IndexedDBIndex.prototype.__defineGetter__("connection",function(){return this.table.connection}),util.inherits(IndexedDBResult,Result),IndexedDBTable.prototype.__defineGetter__("transaction",function(){return this.connection.transaction}),IndexedDBTable.prototype.hasIndex=function(name,callback){if(arguments.length<2)throw new Error("Index name and callback expected.");this.database.hasIndex(this.name,name,callback)},IndexedDBTable.prototype.findIndex=function(name,callback){if(arguments.length<2)throw new Error("Index name and callback expected.");this.database.findIndex(this.name,name,callback)},IndexedDBTable.prototype.createIndex=function(name,col,options,callback){if(arguments.length<2)throw new Error("Index name and indexing column expected.");3==arguments.length&&arguments[2]instanceof Function&&(callback=arguments[2],options={}),this.database.createIndex(this.name,name,col,options,callback)},IndexedDBTable.prototype.dropIndex=function(name,callback){if(arguments.length<1)throw new Error("Index name expected.");this.database.dropIndex(this.name,name,callback)},IndexedDBTable.prototype.find=function(where,callback){var fields;if(arguments.length<1)throw new Error("Callback expected.");if(1==arguments.length){if(!(arguments[0]instanceof Function))throw new Error("Callback expected.");callback=arguments[0],where=void 0}if(where||(where={}),fields=Object.keys(where),0==fields.length)this.findAll(callback);else if(1==fields.length){var fld=fields[0];fld==this.keyPath?this.findByKeyPath(where,callback):this.indexed[fld]?this.findByIndex(where,callback):this.findByFilter(where,callback)}else this.findByFilter(where,callback)},IndexedDBTable.prototype.findByFilter=function(where,callback){var tran,store,req,records=[],filter=new ResultFilter;if(arguments.length<1)throw new Error("Callback expected.");if(1==arguments.length){if(!(arguments[0]instanceof Function))throw new Error("Callback expected.");callback=arguments[0],where=void 0}return where&&0!=Object.keys(where).length?(tran=this.connection.beginTransaction(void 0,this.name),tran.on("error",function(e){callback(e)}),tran.on("complete",function(){callback(void 0,new Result(records))}),store=tran.getObjectStore(this.name),req=store.openCursor(),void(req.onsuccess=function(e){var crs=e.target.result;if(crs){var rec=crs.value;filter.check(rec,where)&&records.push(rec),crs.continue()}})):void this.findAll(callback)},IndexedDBTable.prototype.getIDBKeyRange=function(op,filter){var rg;return"$eq"==op?rg=IDBKeyRange.only(filter.$eq):"$lt"==op?rg=IDBKeyRange.upperBound(filter.$lt,!0):"$le"==op?rg=IDBKeyRange.upperBound(filter.$le):"$gt"==op?rg=IDBKeyRange.lowerBound(filter.$gt,!0):"$ge"==op&&(rg=IDBKeyRange.lowerBound(filter.$ge)),rg},IndexedDBTable.prototype.findByKeyPath=function(where,callback){var filter,rg;if(filter=where[Object.keys(where)[0]],"object"!=typeof filter)rg=IDBKeyRange.only(filter);else{var op=Object.keys(filter);1==op.length&&(rg=this.getIDBKeyRange(op[0],filter))}if(rg){var tran,req,records=[];tran=this.connection.beginTransaction(void 0,this.name),tran.on("error",function(e){callback(e)}),tran.on("complete",function(){callback(void 0,new IndexedDBResult(records,{byKey:!0}))}),req=tran.getObjectStore(this.name).openCursor(rg),req.onerror=function(e){callback(e)},req.onsuccess=function(e){var crs=e.target.result;crs&&(records.push(crs.value),crs.continue())}}else this.findByFilter(where,callback)},IndexedDBTable.prototype.findByIndex=function(where,callback){var key,ix,filter,rg;if(key=Object.keys(where)[0],ix=this.indexed[key],filter=where[key],"object"!=typeof filter)rg=IDBKeyRange.only(filter);else{var op=Object.keys(filter);1==op.length&&(rg=this.getIDBKeyRange(op[0],filter))}if(rg){var tran,req,records=[];tran=this.connection.beginTransaction(void 0,this.name),tran.on("error",function(e){callback(e)}),tran.on("complete",function(){callback(void 0,new IndexedDBResult(records,{byIndex:!0}))}),req=tran.getObjectStore(this.name).index(ix.name).openCursor(rg),req.onerror=function(e){callback(e)},req.onsuccess=function(e){var crs=e.target.result;crs&&(records.push(crs.value),crs.continue())}}else this.findByFilter(where,callback)},IndexedDBTable.prototype.findAll=function(callback){var tran,store,req,records=[];if(arguments.length<1)throw new Error("Callback expected.");tran=this.connection.beginTransaction(void 0,this.name),tran.on("error",function(e){callback(e)}),tran.on("complete",function(){callback(void 0,new IndexedDBResult(records))}),store=tran.getObjectStore(this.name),req=store.openCursor(),req.onsuccess=function(e){var crs=e.target.result;crs&&(records.push(crs.value),crs.continue())}},IndexedDBTable.prototype.findOne=function(where,callback){if(arguments.length<1)throw new Error("Callback expected.");if(1==arguments.length){if(!(arguments[0]instanceof Function))throw new Error("Callback expected.");callback=arguments[0],where=void 0}this.find(where,function(error,result){var record;return error?callback(error):(result.length>=1&&(record=result.rows[0]),void callback(void 0,record))})},IndexedDBTable.prototype.count=function(callback){this.findAll(function(error,result){error?callback(error):callback(void 0,result.length)})},IndexedDBTable.prototype.insert=function(records,callback){function add(i){var req;if(i<records.length)try{req=store.add(records[i]),req.onsuccess=function(){add(i+1)}}catch(e){abortError=e,tran.rollback()}}var tran,store,abortError;if(arguments.length<1)throw new Error("Object(s) to insert expected.");return records?(tran=this.connection.beginTransaction(void 0,this.name),tran.on("abort",function(){abortError&&callback&&callback(new Error(abortError.message))}),tran.on("error",function(e){callback&&callback(e instanceof Error?e:new Error(e.message))}),tran.on("complete",function(){callback&&callback()}),store=tran.getObjectStore(this.name),records instanceof Array||(records=[records]),void add(0)):void(callback&&callback(new Error("Object to insert can't be null or undefined.")))},IndexedDBTable.prototype.save=function(record,callback){var tran;if(arguments.length<1)throw new Error("Object to update expected.");if("object"!=typeof record)throw new Error("Object to update expected.");tran=this.connection.beginTransaction(void 0,this.name),tran.on("error",function(e){callback&&callback(e)}),tran.on("complete",function(){callback&&callback()}),tran.getObjectStore(this.name).put(record)},IndexedDBTable.prototype.remove=function(where,callback){var tran,store,req;if(1==arguments.length&&arguments[0]instanceof Function&&(callback=arguments[0],where=void 0),tran=this.connection.beginTransaction(void 0,this.name),tran.on("complete",function(){callback&&callback()}),store=tran.getObjectStore(this.name),where&&0!=Object.keys(where).length){if(Object.keys(where).indexOf(this.keyPath)<0)throw new Error("Key path expected.");req=store.delete(where[this.keyPath]),req.onerror=function(e){callback&&callback(e)}}else req=store.clear(),req.onerror=function(e){callback&&callback(e)}},IndexedDBTransaction.prototype.__defineGetter__("mode",function(){return this.native.mode}),IndexedDBTransaction.prototype.__defineGetter__("database",function(){return this.connection.database}),IndexedDBTransaction.prototype.on=function(event,handler){if(1==arguments.length){var handlers=arguments[0];handlers.abort?this.on("abort",handlers.abort):handlers.error?this.on("error",handlers.error):handlers.complete&&this.on("complete",handlers.complete)}else"abort"==event?this.abortHandlers.push(handler):"error"==event?this.errorHandlers.push(handler):"complete"==event&&this.completeHandlers.push(handler)},IndexedDBTransaction.prototype.handleErrorEvent=function(e){this.state="aborted";for(var i=0,handlers=this.errorHandlers;i<handlers.length;++i)handlers[i](e)},IndexedDBTransaction.prototype.handleAbortEvent=function(e){this.state="error";for(var i=0,handlers=this.abortHandlers;i<handlers.length;++i)handlers[i](e)},IndexedDBTransaction.prototype.handleCompleteEvent=function(e){this.state="committed";for(var i=0,handlers=this.completeHandlers;i<handlers.length;++i)handlers[i](e)},IndexedDBTransaction.prototype.getObjectStore=function(name){if(("readonly"==this.mode||"readwrite"==this.mode)&&this.objectStoreNames.indexOf(name)<0)throw new Error("The active transaction only can access to the following object stores: "+(this.objectStores||"no specified")+".");return this.native.objectStore(name)},IndexedDBTransaction.prototype.getTable=function(name){return new IndexedDBTable(this.database,this.getObjectStore(name))},IndexedDBTransaction.prototype.rollback=function(){this.native.abort()};