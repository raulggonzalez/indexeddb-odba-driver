'use strict';var util={inherits:function(a,b){a.super_=b;a.prototype=Object.create(b.prototype,{constructor:{value:a,enumerable:!1,writable:!0,configurable:!0}})},_extend:function(a,b){if("object"==typeof b)for(var c=0,d=Object.keys(b);c<d.length;++c){var e=d[c];a[e]=b[e]}return a},getBrowserName:function(){return window.chrome?"Chrome":"Other"}};function Driver(a){Object.defineProperty(this,"name",{value:a})}Driver.getDriver=function(a){if("indexeddb"==a.toLowerCase())return new IndexedDBDriver};function IndexedDBConnection(a){Object.defineProperty(this,"config",{value:a});Object.defineProperty(this,"activeTransaction",{value:void 0,writable:!0});try{Object.defineProperty(this,"indexedDB",{value:Modernizr.indexedDB})}catch(b){Object.defineProperty(this,"indexedDB",{value:window.indexedDB})}}IndexedDBConnection.prototype.clone=function(){return new IndexedDBConnection(util._extend({},this.config))};
IndexedDBConnection.prototype.open=function(a){var b=this,c;c=this.indexedDB;if(this.connected)a&&a(void 0,this.database);else{if(1>arguments.length)throw Error("Callback expected.");c=this.config.version?c.open(this.config.database,this.config.version):c.open(this.config.database);c.onsuccess=function(d){Object.defineProperty(b,"database",{value:new IndexedDBDatabase(b,d.target.result),enumerable:!0,configurable:!0});a&&a(void 0,b.database)};c.onerror=function(b){a&&a(b)}}};
IndexedDBConnection.prototype.__defineGetter__("connected",function(){return void 0!==this.database&&null!==this.database});IndexedDBConnection.prototype.close=function(a){this.database&&this.database.native.close();delete this.database;a&&a()};
IndexedDBConnection.prototype.createDatabase=function(a,b){var c=this,d=this.indexedDB;if(this.connected)throw Error("Connection opened.");d=d.open(this.config.database);d.onerror=function(a){c.activeTransaction=void 0;b&&b(a)};d.onupgradeneeded=function(b){c.activeTransaction=b.currentTarget.transaction;a&&a(new IndexedDBDatabase(c,b.target.result))};d.onsuccess=function(a){c.activeTransaction=void 0;a.target.result.close();b&&b()}};
IndexedDBConnection.prototype.alterDatabase=function(a,b){function c(){var d=f.open(e.config.database);d.onerror=function(a){b&&b(a)};d.onsuccess=function(d){d=d.target.result;var c;c=d.version+1;d.close();d=f.open(e.config.database,c);d.onupgradeneeded=function(b){e.activeTransaction=b.currentTarget.transaction;a(new IndexedDBDatabase(e,b.target.result))};d.onerror=function(a){e.activeTransaction=void 0;b&&b(a)};d.onsuccess=function(a){e.activeTransaction=void 0;a.target.result.close();g?e.open(b):
b&&b()}}}function d(){e.close(function(a){if(a){if(b)return b(a)}else c()})}var e=this,f=this.indexedDB,g;if(1>arguments.length)throw Error("Operation to alter schema expected.");this.connected?(g=!0,d()):(g=!1,c())};IndexedDBConnection.prototype.dropDatabase=function(a){this.indexedDB.deleteDatabase(this.config.database);a&&a()};
IndexedDBConnection.prototype.hasDatabase=function(a,b){var c=this.indexedDB,d;if(1>arguments.length)throw Error("Callback expected.");1==arguments.length&&(b=arguments[0],a=this.config.database);if("Chrome"==util.getBrowserName())d=this.indexedDB.webkitGetDatabaseNames(),d.onsuccess=function(d){b&&b(void 0,d.target.result.contains(a))},d.onerror=function(a){b&&b(a)};else{var e=!0;d=c.open(a);d.onupgradeneeded=function(b){e=!1};d.onsuccess=function(a){d.result.close();e&&c.deleteDatabase(self);b(void 0,
e)}}};function IndexedDBDatabase(a,b,c){Object.defineProperty(this,"connection",{value:a});Object.defineProperty(this,"name",{value:b.name,enumerable:!0});Object.defineProperty(this,"version",{value:b.version,enumerable:!0});Object.defineProperty(this,"native",{value:b})}IndexedDBDatabase.prototype.__defineGetter__("activeTransaction",function(){return this.connection.activeTransaction});
IndexedDBDatabase.prototype.createTable=function(a,b,c){if(1>arguments.length)throw Error("Table name expected.");2==arguments.length&&arguments[1]instanceof Function&&(c=arguments[1],b=void 0);b=util._extend({},b);b.hasOwnProperty("id")&&!b.hasOwnProperty("keyPath")&&(b.keyPath=b.id);if(this.activeTransaction)if(this.native.objectStoreNames.contains(a))c&&c(Error("Object store '"+a+"' already exists."));else{var d=this.native.createObjectStore(a,b);c&&c(void 0,d)}else c&&c(Error("Database.createTable() only into Connection.createDatabase() or Connection.alterDatabase()."))};
IndexedDBDatabase.prototype.createTables=function(a,b){var c=[];if(this.activeTransaction){for(var d=0;d<a.length;++d){var e=a[d];c.push(this.native.createObjectStore(e.name,e))}b&&b(void 0,c)}else b&&b(Error("Database.createTables() only into Connection.createDatabase() or Connection.alterDatabase()."))};IndexedDBDatabase.prototype.hasTable=function(a,b){if(2>arguments.length)throw Error("Table name and callback expected.");b(void 0,this.native.objectStoreNames.contains(a))};
IndexedDBDatabase.prototype.hasTables=function(a,b){if(2>arguments.length)throw Error("Table names and callback expected.");if(b)if(0==a.length)b(void 0,!1);else{for(var c=!0,d=0,e=this.native.objectStoreNames;d<a.length;++d)if(!e.contains(a[d])){c=!1;break}b(void 0,c)}};
IndexedDBDatabase.prototype.findTable=function(a,b){var c=this;if(2>arguments.length)throw Error("Table name and callback expected.");if(this.native.objectStoreNames.contains(a)){var d,e;e=this.activeTransaction;e||(e=this.native.transaction([a],"readonly"),e.onerror=function(a){b(a)},e.oncomplete=function(e){b(void 0,new IndexedDBTable(c,a,d))});d=e.objectStore(a).keyPath;e===this.activeTransaction&&b(void 0,new IndexedDBTable(c,a,d))}else b()};
IndexedDBDatabase.prototype.dropTable=function(a,b){this.activeTransaction?(this.native.objectStoreNames.contains(a)&&this.native.deleteObjectStore(a),b&&b()):b&&b(Error("Database.dropTable() only into Connection.alterDatabase()."))};
IndexedDBDatabase.prototype.findIndex=function(a,b,c){var d,e;if(3>arguments.length)throw Error("Table name, index name and callback expected.");this.native.objectStoreNames.contains(a)&&(d=this.activeTransaction||this.native.transaction([a],"readonly"),d=d.objectStore(a),d.indexNames.contains(b)&&(e=d.index(b)));e?c(void 0,new IndexedDBIndex(this,d,e)):c()};
IndexedDBDatabase.prototype.hasIndex=function(a,b,c){var d,e;if(3>arguments.length)throw Error("Table name, index name and callback expected.");if(!this.native.objectStoreNames.contains(a))return c(void 0,!1);d=this.activeTransaction;d||(d=this.native.transaction([a],"readonly"),d.onerror=function(b){c(b)},d.oncomplete=function(b){c(void 0,e)});e=d.objectStore(a).indexNames.contains(b);d===this.activeTransaction&&c(void 0,e)};
IndexedDBDatabase.prototype.createIndex=function(a,b,c,d,e){var f;if(3>arguments.length)throw Error("Table name, index name and indexing column name expected.");4==arguments.length&&arguments[3]instanceof Function&&(e=arguments[3],d=void 0);(f=this.activeTransaction)?this.native.objectStoreNames.contains(a)?(f=f.objectStore(a),f.indexNames.contains(b)?e&&e(Error("Index '"+b+"' on '"+a+"' already exists.")):(f.createIndex(b,c,d),e&&e())):e&&e(Error("Object store '"+a+"' doesn't exist.")):e&&e(Error("Database.createIndex() only into Connection.createDatabase() or Connection.alterDatabase()."))};
IndexedDBDatabase.prototype.dropIndex=function(a,b,c){var d;if(2>arguments.length)throw Error("Table name and index name expected.");(d=this.activeTransaction)?(this.native.objectStoreNames.contains(a)&&(d=d.objectStore(a),d.indexNames.contains(b)&&d.deleteIndex(b)),c&&c()):c&&c(Error("Database.dropIndex() only into Connection.alterDatabase()."))};function IndexedDBDriver(){IndexedDBDriver.super_.call(this,"IndexedDB")}util.inherits(IndexedDBDriver,Driver);IndexedDBDriver.prototype.createConnection=function(a){if(!a||!a.database)throw Error("Database name expected.");return new IndexedDBConnection(a)};function IndexedDBIndex(){var a,b;3==arguments.length&&(a=arguments[0],a=new IndexedDBTable(a,arguments[1].name,arguments[1].keyPath),b=arguments[2]);Object.defineProperty(this,"table",{value:a});Object.defineProperty(this,"name",{value:b.name});Object.defineProperty(this,"column",{value:b.keyPath});Object.defineProperty(this,"unique",{value:b.unique})}IndexedDBIndex.prototype.__defineGetter__("database",function(){return this.table.database});
IndexedDBIndex.prototype.__defineGetter__("connection",function(){return this.table.connection});function IndexedDBResult(a){Object.defineProperty(this,"rows",{value:a})}IndexedDBResult.prototype.__defineGetter__("length",function(){return this.rows.length});function IndexedDBTable(a,b,c){Object.defineProperty(this,"database",{value:a});Object.defineProperty(this,"name",{value:b});Object.defineProperty(this,"keyPath",{value:c});Object.defineProperty(this,"connection",{value:a.connection})}IndexedDBTable.prototype.__defineGetter__("activeTransaction",function(){return this.connection.activeTransaction});
IndexedDBTable.prototype.hasIndex=function(a,b){if(2>arguments.length)throw Error("Index name and callback expected.");this.database.hasIndex(this.name,a,b)};IndexedDBTable.prototype.findIndex=function(a,b){if(2>arguments.length)throw Error("Index name and callback expected.");this.database.findIndex(this.name,a,b)};
IndexedDBTable.prototype.createIndex=function(a,b,c,d){if(2>arguments.length)throw Error("Index name and indexing column expected.");3==arguments.length&&arguments[2]instanceof Function&&(d=arguments[2],c={});this.database.createIndex(this.name,a,b,c,d)};IndexedDBTable.prototype.dropIndex=function(a,b){if(1>arguments.length)throw Error("Index name expected.");this.database.dropIndex(this.name,a,b)};IndexedDBTable.prototype.validateWhere=function(a){return 0<=Object.keys(a).indexOf(this.keyPath)};
IndexedDBTable.prototype.find=function(a,b){if(1>arguments.length)throw Error("Callback expected.");if(1==arguments.length)if(arguments[0]instanceof Function)b=arguments[0],a=void 0;else throw Error("Callback expected.");if(a&&0!=Object.keys(a).length){var c,d;if(!this.validateWhere(a))return b(Error("Invalid find criteria."));c=this.database.native.transaction([this.name],"readonly");c.onerror=function(a){b(a)};c.oncomplete=function(a){a=new IndexedDBResult([]);d.result&&a.rows.push(d.result);b(void 0,
a)};d=c.objectStore(this.name).get(a[this.keyPath]);d.onerror=function(a){b(a)}}else this.findAll(b)};IndexedDBTable.prototype.findAll=function(a){var b,c=[];if(1>arguments.length)throw Error("Callback expected.");b=this.activeTransaction;b||(b=this.database.native.transaction([this.name],"readonly"),b.onerror=function(b){a(b)},b.oncomplete=function(b){a(void 0,new IndexedDBResult(c))});b.objectStore(this.name).openCursor().onsuccess=function(a){if(a=a.target.result)c.push(a.value),a.continue()}};
IndexedDBTable.prototype.findOne=function(a,b){if(1>arguments.length)throw Error("Callback expected.");if(1==arguments.length)if(arguments[0]instanceof Function)b=arguments[0],a=void 0;else throw Error("Callback expected.");this.find(a,function(a,d){var e;if(a)return b(a);1<=d.length&&(e=d.rows[0]);b(void 0,e)})};IndexedDBTable.prototype.count=function(a){this.findAll(function(b,c){b?a(b):a(void 0,c.length)})};
IndexedDBTable.prototype.insert=function(a,b){function c(b){var h;if(b<a.length)try{h=e.add(a[b]),h.onsuccess=function(a){c(b+1)}}catch(k){f=k,d.abort()}}var d,e,f;if(1>arguments.length)throw Error("Object(s) to insert expected.");a?(d=this.activeTransaction,d||(d=this.database.native.transaction([this.name],"readwrite"),d.onabort=function(a){f&&b&&b(Error(f.message))},d.onerror=function(a){b&&b(a instanceof Error?a:Error(a.message))},d.oncomplete=function(a){b&&b()}),e=d.objectStore(this.name),a instanceof
Array||(a=[a]),c(0)):b&&b(Error("Object to insert can't be null or undefined."))};IndexedDBTable.prototype.save=function(a,b){var c;if(1>arguments.length)throw Error("Object to update expected.");if("object"!=typeof a)throw Error("Object to update expected.");c=this.activeTransaction;c||(c=this.database.native.transaction([this.name],"readwrite"),c.onerror=function(a){b&&b(a)},c.oncomplete=function(a){b&&b()});c.objectStore(this.name).put(a);c===this.activeTransaction&&b&&b()};
IndexedDBTable.prototype.remove=function(a,b){var c;1==arguments.length&&arguments[0]instanceof Function&&(b=arguments[0],arguments[0]=void 0);c=this.database.native.transaction([this.name],"readwrite");c.onerror=function(a){b(a)};c.oncomplete=function(a){b&&b()};c=c.objectStore(this.name);if(a&&0!=Object.keys(a).length){if(0>Object.keys(a).indexOf(this.keyPath))throw Error("Key path expected.");c=c.delete(a[this.keyPath]);c.onerror=function(a){b(a)}}else c=c.clear(),c.onerror=function(a){b(a)}};
